
zbc401_09_demo.
CLASS icl_vehicle DEFINITION.
  PUBLIC SECTION.
*Here we have added code for definin the METHODS in PUBLIC Sectin
    METHODS:      set_attributes
      IMPORTING
        iv_make  TYPE s_make
        iv_model TYPE s_model,
      display_attributes.

    CLASS-METHODS display_n_o_vehicles.
    
*Calling functional METHODS
    CLASS-METHODS get_n_o_vehicles
      RETURNING VALUE(rv_count) TYPE i.
    
    
*Creating constructor
    METHODS constructor
      IMPORTING
                 iv_make  TYPE s_make
                 iv_model TYPE s_model
      EXCEPTIONS wrong_type.
    

  PRIVATE SECTION.

    DATA: my_make  TYPE s_make,
          my_model TYPE s_model.
*Adding code for declaring attributes to the PRIVATE SECTION of the definition
*part of my CLASS icl_vehicle
    DATA:
      my_tankcap TYPE svehicle-tankcap,
      my_consum  TYPE svehicle-consum,
      my_speed   TYPE svehicle-speed.

    CLASS-DATA gv_n_o_vehicles TYPE i
    .ENDCLASS.
    

CLASS icl_vehicle IMPLEMENTATION.
*Here we are creating the PUBLIC METHOD set attributes

  METHOD set_attributes.
    my_make = iv_make.
    my_model = iv_model.
    gv_n_o_vehicles = gv_n_o_vehicles + 1.
  ENDMETHOD.
  
  
* Here are implementing the cmethod display_atributes
  METHOD display_attributes.
    WRITE:/ 'Make', my_model,
    / 'Model', my_model.
  ENDMETHOD.
  

*Here we are implementing the static METHOD display vehicles.
  METHOD display_n_o_vehicles.
    WRITE: 'Number of Vehicles:', gv_n_o_vehicles.
  ENDMETHOD.


*Adding code for implementing the METHOD get_n_o_vehicles
  METHOD get_n_o_vehicles.
    rv_count = gv_n_o_vehicles.
  ENDMETHOD.


  METHOD constructor.
    DATA ls_vehicle TYPE svehicle.
    SELECT SINGLE * FROM svehicle INTO ls_vehicle
                    WHERE make = iv_make
                    AND model = iv_model.
    IF sy-subrc <> 0.
      RAISE wrong_type.

    ELSE.
      my_make = iv_make.
      my_model = iv_model.
      my_tankcap = ls_vehicle-tankcap.
      my_consum = ls_vehicle-consum.
      my_speed = ls_vehicle-speed.
      gv_n_o_vehicles = gv_n_o_vehicles + 1.

    ENDIF.
  ENDMETHOD.
ENDCLASS.


*Code for creating objects and storing the reference in the internal table.
DATA: go_vehicle      TYPE REF TO icl_vehicle,
      gt_vehicles     TYPE TABLE OF REF TO icl_vehicle,
      gv_n_o_vehicles TYPE i.

START-OF-SELECTION.
*Calling the static METHODS.
  icl_vehicle=>display_n_o_vehicles( ).


*Here I will CREATE code to extend all the CREATE OBJECT stratements in the START of selection
*event in my PROGRAM
  CREATE OBJECT go_vehicle.
  EXPORT
  iv_make = 'Audi'
  iv_model = 'A3'
   exceptions wrong_type = 1.
  IF sy-subrc = 0.
    APPEND go_vehicle TO gt_vehicles.
  ENDIF.


  CREATE OBJECT go_vehicle.
  EXPORT
  iv_make = 'BMW'
  iv_model = '318I'
  exceptions wrong_type = 1.
  IF sy-subrc = 0.
    APPEND go_vehicle TO gt_vehicles.
  ENDIF.


  CREATE OBJECT go_vehicle.
  EXPORT
  iv_make = 'Porsche'
  iv_model = '911'
  exceptions wrong_type = 1.
  IF sy-subrc = 0.
    APPEND go_vehicle TO gt_vehicles.
  ENDIF.


  LOOP AT gt_vehicles INTO go_vehicle.
    go_vehicle->display_attributes( ).
  ENDLOOP.


  gv_n_o_vehicles = icl_vehicle=>get_n_o_vehicles( ).
  WRITE:'Number of Vehicles:', gv_n_o_vehicles.
  
  
  
  
